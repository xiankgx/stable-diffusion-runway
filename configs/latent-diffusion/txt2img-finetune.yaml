model:
  base_learning_rate: 1.0e-05
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "image"
    cond_stage_key: "caption"
    image_size: 32 # Note: make sure this is image size // (2 ** (len(first_stage_model.params.ch_mult) - 1))
    channels: 4
    cond_stage_trainable: false # Note: Whether to unfreeze the conditional model for training
    conditioning_key: crossattn
    monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: False
    ckpt_path: models/ldm/text2img-large/model.ckpt

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [10000]
        cycle_lengths: [10000000000000] # incredibly large number to prevent corner cases
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [1.]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      # Note: Compare the following params with configs/stable-diffusion/v1-inference.yaml should we want to resume training
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [4, 2, 1]
        num_res_blocks: 2
        channel_mult: [1, 2, 4, 4]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 1280
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
            - 1
            - 2
            - 4
            - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity
        # Note: extract first state autoencoder model using notebooks/extract_model_state_dict.ipynb
        # Comment if not restoring from checkpoint.
        # ckpt_path: checkpoints/stable-diffusion-v-1-4-original/sd-v1-4-first_stage.ckpt

    cond_stage_config:
      target: ldm.modules.encoders.modules.BERTEmbedder
      params:
        n_embed: 1280
        n_layer: 32

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 8
    wrap: False

    train:
      target: ldm.data.custom.ImageCaptioningDataset
      params:
        annotations_csv_file: ../datasets/redbubble_stickers/annotations.csv
        # image_root: ../datasets/stickers
        image_root: ../datasets/redbubble_stickers/images
        repeats: 1
        size: 256
        hflip: True
        random_crop: True
        random_crop_scale: [0.8, 1.0]

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 1000
        max_images: 8
        increase_log_steps: False

    # metrics_over_trainsteps_checkpoint:
    #   params:
    #     monitor: "val/rec_loss"
    #     every_n_train_steps: 2000
    #     save_top_k: 3

  # logger:
  #   target: pytorch_lightning.loggers.WandbLogger
  #   params:
  #     name: ldm

  trainer:
    benchmark: True
    accumulate_grad_batches: 4
    # precision: 16
